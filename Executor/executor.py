from Helper import Level
from typing import Dict
from time import sleep
from .executor_base import ExecutorBase
from Task import Task
from .status import Status
from tempfile import TemporaryDirectory
from math import floor


class Executor(ExecutorBase):
    def __init__(self, params: Dict, tempFolder: TemporaryDirectory = None):
        super().__init__(params, "Executor", tempFolder)

    def Run(self):
        from Experiment import Expander  # Delayed to avoid cyclic imports

        self.SetStarted()

        tasks = self.Configuration.RunTasks
        self.params['PreviousTaskLog'] = []
        for i, task in enumerate(tasks, start=1):
            if self.stopRequested:
                self.LogAndMessage(Level.INFO, "Received stop request, exiting")
                self.Status = Status.Cancelled
                break
            taskInstance: Task = task.Task(self.Log, self, Expander.ExpandDict(task.Params, self))
            self.AddMessage(f'Starting task {taskInstance.name}')
            taskInstance.Start()

            # Add the values generated by the task to the global dictionary
            self.params.update(taskInstance.Vault)
            self.params['PreviousTaskLog'] = taskInstance.LogMessages

            self.AddMessage(f'Task {taskInstance.name} finished', int(floor(10 + ((i / len(tasks)) * 80))))
        else:
            self.Status = Status.Finished

        self.SetFinished(percent=100)
